{"ast":null,"code":"import { ADD_MOVIE, DELETE_MOVIE, UPDATE_MOVIE, SET_CURRENT, CLEAR_CURRENT, FILTER_MOVIES, CLEAR_FILTER, MOVIE_ERROR, GET_MOVIES, CLEAR_MOVIES } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_MOVIES:\n      return { ...state,\n        movies: action.payload.movies,\n        loading: false\n      };\n\n    case ADD_MOVIE:\n      return { ...state,\n        movies: [action.payload, ...state.movies],\n        loading: false\n      };\n\n    case UPDATE_MOVIE:\n      return { ...state,\n        movies: state.movies.map(movie => movie.id === action.payload.id ? action.payload : movie),\n        loading: false\n      };\n\n    case DELETE_MOVIE:\n      console.log(action.payload);\n      return { ...state,\n        movies: state.movies.filter(movie => movie.id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_MOVIES:\n      return { ...state,\n        movies: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_MOVIES:\n      return { ...state,\n        filtered: state.movies.filter(movie => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return movie.Title.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case MOVIE_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/annayoungyeun/Projects/bucket-flicks-react-app/client/src/context/movie/movieReducer.js"],"names":["ADD_MOVIE","DELETE_MOVIE","UPDATE_MOVIE","SET_CURRENT","CLEAR_CURRENT","FILTER_MOVIES","CLEAR_FILTER","MOVIE_ERROR","GET_MOVIES","CLEAR_MOVIES","state","action","type","movies","payload","loading","map","movie","id","console","log","filter","filtered","error","current","regex","RegExp","Title","match"],"mappings":"AAAA,SACEA,SADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,YAPF,EAQEC,WARF,EASEC,UATF,EAUEC,YAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,UAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELG,QAAAA,MAAM,EAAEF,MAAM,CAACG,OAAP,CAAeD,MAFlB;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKf,SAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,MAAM,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,MAA1B,CAFH;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,YAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaG,GAAb,CAAkBC,KAAD,IACzBA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,OAAP,CAAeI,EAA5B,GAAiCP,MAAM,CAACG,OAAxC,GAAkDG,KAD1C,CAFH;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKd,YAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACG,OAAnB;AAEA,aAAO,EACL,GAAGJ,KADE;AAELG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaQ,MAAb,CACLJ,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,OADzB,CAFH;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKN,YAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELG,QAAAA,MAAM,EAAE,IAFH;AAGLS,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKrB,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELc,QAAAA,OAAO,EAAEb,MAAM,CAACG;AAFX,OAAP;;AAIF,SAAKV,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELc,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKnB,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELY,QAAAA,QAAQ,EAAEZ,KAAK,CAACG,MAAN,CAAaQ,MAAb,CAAqBJ,KAAD,IAAW;AACvC,gBAAMQ,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEf,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,KAAK,CAACU,KAAN,CAAYC,KAAZ,CAAkBH,KAAlB,CAAP;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKnB,YAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELY,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKf,WAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELa,QAAAA,KAAK,EAAEZ,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AApEJ;AAsED,CAvED","sourcesContent":["import {\n  ADD_MOVIE,\n  DELETE_MOVIE,\n  UPDATE_MOVIE,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  FILTER_MOVIES,\n  CLEAR_FILTER,\n  MOVIE_ERROR,\n  GET_MOVIES,\n  CLEAR_MOVIES,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_MOVIES:\n      return {\n        ...state,\n        movies: action.payload.movies,\n        loading: false,\n      };\n    case ADD_MOVIE:\n      return {\n        ...state,\n        movies: [action.payload, ...state.movies],\n        loading: false,\n      };\n    case UPDATE_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.map((movie) =>\n        movie.id === action.payload.id ? action.payload : movie\n        ),\n        loading: false,\n      };\n    case DELETE_MOVIE:\n      console.log(action.payload)\n\n      return {\n        ...state,\n        movies: state.movies.filter(\n          (movie) => movie.id !== action.payload\n        ),\n        loading: false,\n      };\n    case CLEAR_MOVIES:\n      return {\n        ...state,\n        movies: null,\n        filtered: null,\n        error: null,\n        current: null,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case FILTER_MOVIES:\n      return {\n        ...state,\n        filtered: state.movies.filter((movie) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return movie.Title.match(regex);\n        }),\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case MOVIE_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}