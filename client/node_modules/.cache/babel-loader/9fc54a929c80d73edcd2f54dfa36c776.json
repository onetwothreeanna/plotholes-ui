{"ast":null,"code":"var _jsxFileName = \"/Users/annayoungyeun/Projects/bucket-flicks-react-app/client/src/components/movies/MoviesFilter.js\";\nimport React, { useContext, useRef, useEffect } from 'react'; //useRef hook is a way to reference a dom object - alternative for forms.  use for simple forms\n\nimport MovieContext from '../../context/movie/movieContext';\n\nconst MovieFilter = () => {\n  const movieContext = useContext(MovieContext);\n  const {\n    filterMovies,\n    clearFilter,\n    filtered,\n    loading\n  } = movieContext;\n  const text = useRef('');\n  useEffect(() => {\n    if (filtered === null) {\n      text.current.value = '';\n    }\n  });\n\n  const onChange = e => {\n    if (text.current.value !== '') {\n      filterMovies(e.target.value);\n    } else {\n      clearFilter();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: text,\n    type: \"text\",\n    placeholder: \"Filter movies by Title\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MovieFilter;","map":{"version":3,"sources":["/Users/annayoungyeun/Projects/bucket-flicks-react-app/client/src/components/movies/MoviesFilter.js"],"names":["React","useContext","useRef","useEffect","MovieContext","MovieFilter","movieContext","filterMovies","clearFilter","filtered","loading","text","current","value","onChange","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,MAA5B,EAAoCC,SAApC,QAAqD,OAArD,C,CACA;;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,YAAY,GAAGL,UAAU,CAACG,YAAD,CAA/B;AACA,QAAM;AAAEG,IAAAA,YAAF;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA;AAAvC,MAAmDJ,YAAzD;AACA,QAAMK,IAAI,GAAGT,MAAM,CAAC,EAAD,CAAnB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,QAAQ,KAAK,IAAjB,EAAuB;AACrBE,MAAAA,IAAI,CAACC,OAAL,CAAaC,KAAb,GAAqB,EAArB;AACD;AACF,GAJQ,CAAT;;AAKA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACtB,QAAIJ,IAAI,CAACC,OAAL,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC7BN,MAAAA,YAAY,CAACQ,CAAC,CAACC,MAAF,CAASH,KAAV,CAAZ;AACD,KAFD,MAEO;AACLL,MAAAA,WAAW;AACZ;AACF,GAND;;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAEG,IADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,wBAHd;AAIE,IAAA,QAAQ,EAAEG,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAUD,CA5BD;;AA8BA,eAAeT,WAAf","sourcesContent":["import React, { useContext, useRef, useEffect } from 'react';\n//useRef hook is a way to reference a dom object - alternative for forms.  use for simple forms\nimport MovieContext from '../../context/movie/movieContext';\n\nconst MovieFilter = () => {\n  const movieContext = useContext(MovieContext);\n  const { filterMovies, clearFilter, filtered, loading } = movieContext;\n  const text = useRef('');\n\n  useEffect(() => {\n    if (filtered === null) {\n      text.current.value = '';\n    }\n  });\n  const onChange = (e) => {\n    if (text.current.value !== '') {\n      filterMovies(e.target.value);\n    } else {\n      clearFilter();\n    }\n  };\n\n  return (\n    <form>\n      <input\n        ref={text}\n        type='text'\n        placeholder='Filter movies by Title'\n        onChange={onChange}\n      />\n    </form>\n  );\n};\n\nexport default MovieFilter;\n"]},"metadata":{},"sourceType":"module"}